<?php
/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	INCLUDES
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	namespace PHP_CodeSniffer\Standards\HelloNasty\Sniffs\Comments;


	use PHP_CodeSniffer\Sniffs\Sniff;
	use PHP_CodeSniffer\Files\File;



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	CLASS DECLARATION
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


class FunctionEmptyLineSniff implements Sniff
{

	public function register() {

		return array(T_FUNCTION);
	}


	public function process(File $file, $stackPtr) {

		$tokens = $file->getTokens();
		$token = $tokens[$stackPtr];

		// find opening bracket
		$nextPtr = $file->findNext(T_OPEN_CURLY_BRACKET, $stackPtr, null, false);
		$nextToken = $tokens[$nextPtr];

		// find next token after opening bracket
		$nextPtr = $file->findNext(T_WHITESPACE, $nextPtr+1, null, true);
		$nextToken = $tokens[$nextPtr];

		// check if opening bracket is on the same line
		if($nextToken['line'] - $token['line'] != 2) {

			// ignore functions in one line
			$nextPtr = $file->findNext(T_CLOSE_CURLY_BRACKET, $stackPtr, null, false);
			$nextToken = $tokens[$nextPtr];
			if($nextToken['line'] == $token['line']) { return; }

			$file->addError('There must be 1 blank line after opening bracket', $stackPtr, 'Function_EmptyLine');
		}
	}



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


}	// end class


