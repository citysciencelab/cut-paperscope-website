<?php
/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    INCLUDES
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	namespace Tests\PHPUnit\Feature\Models\App;

	// Laravel
	use Tests\PHPUnit\TestCase;
	use Illuminate\Foundation\Testing\RefreshDatabase;
	use Illuminate\Support\Facades\Schema;

	// Models
	use App\Models\App\Base\Fragment;
	use App\Models\App\Base\Item;



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    CLASS DECLARATION
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


class FragmentTest extends TestCase {

	use RefreshDatabase;



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    SCHEMA
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	public function test_database_has_expected_columns() {

		$this->assertTrue(
		  Schema::hasColumns('fragments', [
			...$this->getBasePropsNoSlug(),
			...$this->getParentModelProps(),
			'template',
			$this->translateProp('content'),
		]), 1);
	}



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    PERMISSIONS
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	public function test_existing_permissions_for_fragment() {

		// arrange
		$this->seed();

		// act
		$this->assertDatabaseHas('permissions', ['name' => 'create fragments']);
		$this->assertDatabaseHas('permissions', ['name' => 'edit fragments']);
		$this->assertDatabaseHas('permissions', ['name' => 'delete fragments']);
	}



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    PARENT RELATION
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	public function test_has_public_parent_relation() {

		// arrange
		$item = Item::factory()->public()->create();
		$fragment = Fragment::factory()->create([
			'public' => true,
			'parent_id' => $item->id,
			'parent_type' => Item::class
		]);

		// act
		$fragment->load('parent');

		// assert
		$this->assertInstanceOf(Item::class, $fragment->parent);
	}


	public function test_has_no_public_parent_relation() {

		// arrange
 		$item = Item::factory()->create(['public'=>false]);
		$fragment = Fragment::factory()->create([
			'public' => true,
			'parent_id' => $item->id,
			'parent_type' => Item::class
		]);

		// act
		$fragment->load('parent');

		// assert
		$this->assertNull($fragment->parent);
	}


	public function test_has_parent_relation_in_backend() {

		// arrange
		$this->loginAsAdmin();
 		$item = Item::factory()->create(['public'=>false]);
		$fragment = Fragment::factory()->create([
			'public' => true,
			'parent_id' => $item->id,
			'parent_type' => Item::class
		]);

		// act
		request()->headers->set('x-context', 'backend');
		$fragment->load('parent');

		// assert
		$this->assertInstanceOf(Item::class, $fragment->parent);
	}



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */

} // end class
