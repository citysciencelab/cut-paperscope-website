<?php
/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    INCLUDES
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	namespace Tests\PHPUnit\Feature\Jobs\Newsletter;

	// Laravel
	use Tests\PHPUnit\TestCase;
	use Illuminate\Foundation\Testing\RefreshDatabase;
	use Illuminate\Support\Facades\Log;
	use Mockery;

	// App
	use App\Jobs\Newsletter\RemoveUserFromNewsletter;



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    CLASS DECLARATION
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


class RemoveUserFromNewsletterTest extends TestCase {

	use RefreshDatabase;


	protected function setUp(): void {

		parent::setUp();
	}



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	JOB
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	public function test_job_failed() {

		// arrange/assert
		Log::shouldReceive('critical')->with('Job failed: Unable to remove Brevo contact. Email: tester@hello-nasty.com')->once();

		// act
		$job = new RemoveUserFromNewsletter('tester@hello-nasty.com');
		$job->failed(new \Exception('test exception'));
	}



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	REMOVE USER
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	public function test_remove_user() {

		// arrange: mock brevo contact
		$contactsApi = $this->mockBrevo();
		$contactsApi->shouldReceive('deleteContact')->andReturn(true);

		// act
		$job = new RemoveUserFromNewsletter('tester@hello-nasty.com');
		$job->handle();

		// assert
		$this->expectNotToPerformAssertions();
	}


	public function test_remove_user_exception() {

		// arrange: mock brevo contact
		$contactsApi = $this->mockBrevo();
		$contactsApi->shouldReceive('deleteContact')->andThrow(new \Brevo\Client\ApiException);

		// act
		$job = new RemoveUserFromNewsletter('tester@hello-nasty.com');
		$job->handle();

		// assert
		$this->expectNotToPerformAssertions();
	}



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	MOCKS BREVO
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	protected function mockBrevo() {

		// mock brevo config
		$config = Mockery::mock('overload:Brevo\Client\Configuration');
		$config->shouldReceive('getDefaultConfiguration')->andReturn($config);
		$config->shouldReceive('setApiKey')->andReturn($config);

		// mock brevo api
		$contactsApi = Mockery::mock('overload:Brevo\Client\Api\ContactsApi');

		return $contactsApi;
	}



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


} // end class

