<?php
/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    INCLUDES
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	namespace Tests\PHPUnit\Feature\Http\Requests\Backend\Base;

	// Laravel
	use Tests\PHPUnit\TestCase;
	use Illuminate\Foundation\Testing\RefreshDatabase;
	use Illuminate\Support\Facades\Bus;

	// App
	use App\Models\App\Base\Item;
	use App\Jobs\Base\ProcessFragmentUpload;



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    CLASS DECLARATION
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


class FragmentSaveRequestTest extends TestCase {

	use RefreshDatabase;



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    SAVE
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	public function test_save_fragmnet() {

		// arrange
		Bus::fake();
		$this->seed();
		$this->loginAsEditor();

		// arrange: form data
		$item = Item::first();

		$formData = $this->getBaseFormData();
		$formData['template'] = 'text-image';
		$formData['parent_id'] = $item->id;
		$formData['parent_type'] = 'item';
		$formData[$this->translateProp('content')] = [
			'text' => 'test text',
			'image' => 'test image',
		];

		// arrange relations
		$items = Item::factory()->count(2)->create()->toArray();
		$formData['items'] = $items;

		// act
		$fragment = $this->postData('/api/backend/fragment/save', $formData, $this->getBackendHeaders());

		// assert
		$this->assertEquals('fragment',$fragment['type']);
		$this->assertArraySubset($formData, $fragment);

		// assert: jobs
		Bus::assertDispatched(ProcessFragmentUpload::class);
	}


	private function getBaseFormData() {

		return [
			'name' => 'test name',
			'public' => true,
			'order' => 0,
			'published_start' => '1.2.2023 12:34',
		];
	}



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */

} // end class

