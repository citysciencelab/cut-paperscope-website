<?php
/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    INCLUDES
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	namespace Tests\PHPUnit\Feature\Http\Requests;

	// Laravel
	use Tests\PHPUnit\TestCase;
	use Illuminate\Foundation\Testing\RefreshDatabase;

	// App
	use App\Http\Requests\BaseFormRequest;


/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    CLASS DECLARATION
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


class BaseFormRequestTest extends TestCase {

	use RefreshDatabase;



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    AUTHORIZE
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	public function test_authorize() {

		// arrange
		$this->loginAsEditor();

		// act
		$data = $this->postData('/api/backend/item/save',[
			'name' => 'Test',
			'published_start' => '1.1.2020 00:00',
		]);

		// assert
		$this->assertNotEmpty($data);
	}


	public function test_authorize_not_allowed_for_app_user() {

		// arrange
		$this->loginAsUser();

		// act
		$response = $this->post('/api/backend/item/save',[
			'name' => 'Test',
			'published_start' => '1.1.2020 00:00',
		]);

		// assert
		$response->assertStatus(302);
	}


	public function test_authorize_not_allowed_without_login() {

		// act
		$response = $this->post('/api/backend/item/save',['name' => 'Test']);

		// assert
		$response->assertStatus(302);
	}



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    MULTI LANGUAGE
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	public function test_multi_lang_rules() {

		// arrange
		config(['app.features.multi_lang' => true]);
		config(['app.available_locales' => ['de','en']]);
		config(['app.fallback_locale' => 'de']);

		$rules = [
			'name' => 'required|string|translate',
			'published_start' => 'nullable|date',
		];

		// act
		$request = new BaseFormRequest();
		$rules = $request->translate($rules);

		// assert
		$this->assertIsArray($rules);
		$this->assertArrayHasKey('name_de',$rules);
		$this->assertArrayHasKey('name_en',$rules);
		$this->assertArrayHasKey('published_start',$rules);
	}


	public function test_multi_lang_rules_disabled() {

		// arrange
		config(['app.features.multi_lang' => false]);
		config(['app.available_locales' => ['de','en']]);
		config(['app.fallback_locale' => 'de']);
		$rules = [
			'name' => 'required|string|translate',
			'published_start' => 'nullable|date',
		];

		// act
		$request = new BaseFormRequest();
		$rules = $request->translate($rules);

		// assert
		$this->assertIsArray($rules);
		$this->assertArrayHasKey('name',$rules);
		$this->assertArrayHasKey('published_start',$rules);
	}



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    ERROR MESSAGES
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	public function test_error_attributes() {

		// act
		$request = new BaseFormRequest();
		$attributes = $request->attributes();

		// assert
		$this->assertIsArray($attributes);
		$this->assertArrayHasKey('username',$attributes);
		$this->assertArrayHasKey('stripe-id',$attributes);
	}



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */

} // end class

