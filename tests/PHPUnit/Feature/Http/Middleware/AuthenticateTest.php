<?php
/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    INCLUDES
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	namespace Tests\PHPUnit\Feature\Http\Middleware;

	// Laravel
	use Tests\PHPUnit\TestCase;
	use Illuminate\Http\Request;
	use Illuminate\Http\Response;
	use Illuminate\Support\Facades\Auth;

	// App
	use App\Http\Middleware\Authenticate;



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    CLASS DECLARATION
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


class AuthenticateTest extends TestCase {



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    VERIFICATION RESEND
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	public function test_authenticate_verification_resend_native_app() {

		// arrange
		$user = $this->loginAsUser();

		// arrange: request
		$request = Request::create('http://localhost/auth/email/verification-notification', 'POST');
		$request->headers->set('X-Native-App', 'true');
		$request->setRouteResolver(fn() => new \Illuminate\Routing\Route('POST', '', ['as'=>'verification.send']));
		$request->setLaravelSession($this->app['session.store']);
		$request->setUserResolver(function () use ($user) { return $user; });

		// arrange: mock auth driver
		$authFactory = $this->mockAuthDriver($user);

		// act
		/** @var \Illuminate\Contracts\Auth\Factory $authFactory **/
		$middlware = new Authenticate($authFactory);
		$next = $middlware->handle($request, function ($request) { return new Response(); });

		// assert
		$this->assertInstanceOf(Response::class, $next);
		$this->assertEquals(200, $next->getStatusCode());
	}



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    MOCKS
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	public function mockAuthDriver(&$user) {

		$authFactory = $this->mock('Illuminate\Contracts\Auth\Factory');
		$authFactory->shouldReceive('user')->andReturn($user);
		$authFactory->shouldReceive('check')->andReturn(true);
		$authFactory->shouldReceive('shouldUse')->andReturn($authFactory);
		$authFactory->shouldReceive('guard')->andReturn($authFactory);
		return $authFactory;
	}



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */

} // end class

