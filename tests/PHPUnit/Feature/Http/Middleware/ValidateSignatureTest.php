<?php
/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    INCLUDES
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	namespace Tests\PHPUnit\Feature\Http\Middleware;

	// Laravel
	use Tests\PHPUnit\TestCase;
	use Illuminate\Http\Request;
	use Illuminate\Http\Response;
	use Illuminate\Support\Facades\URL;
	use Illuminate\Support\Carbon;
	use Illuminate\Support\Facades\Auth;
	use Illuminate\Support\Facades\Config;

	// App
	use App\Http\Middleware\ValidateSignature;



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    CLASS DECLARATION
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


class ValidateSignatureTest extends TestCase {



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    TEST
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	public function test_validate_with_expired_signature() {

		// arrange
		$user = $this->loginAsUser();

		// arrange: request
		$url = $this->verificationUrl($user);
		$request = Request::create($url, 'GET');
		$this->travel(5)->hours();

		// act
		$middlware = new ValidateSignature();
		$response = $middlware->handle($request, function ($request) { return new Response(); });

		// assert
		$this->assertEquals(302, $response->getStatusCode());
		$this->assertEquals(config('fortify.login') . '?error=signature-expired', $response->getTargetUrl());
		$this->assertNull(Auth::user());
	}


	public function test_validate_with_invalid_signature() {

		// arrange
		$user = $this->loginAsUser();

		// arrange: request
		$url = $this->verificationUrl($user);
		$url = str_replace('signature=', 'signature=invalid', $url);
		$request = Request::create($url, 'GET');

		// act
		$middlware = new ValidateSignature();
		$response = $middlware->handle($request, function ($request) { return new Response(); });

		// assert
		$this->assertEquals(302, $response->getStatusCode());
		$this->assertEquals(config('fortify.login') . '?error=signature-invalid', $response->getTargetUrl());
		$this->assertNull(Auth::user());
	}



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	VERIFICATION LINK
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	protected function verificationUrl($notifiable) {

		return URL::temporarySignedRoute(
			'verification.verify',
			Carbon::now()->addMinutes(Config::get('auth.verification.expire', 60)),
			[
				'id' => $notifiable->getKey(),
				'hash' => sha1($notifiable->getEmailForVerification()),
				'lang' => 'de',
			]
		);
	}



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */

} // end class

