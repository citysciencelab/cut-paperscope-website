<?php
/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    INCLUDES
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	namespace Tests\PHPUnit\Feature\Http\Controllers\App\Base;

	// Laravel
	use Tests\PHPUnit\TestCase;
	use Illuminate\Foundation\Testing\RefreshDatabase;

	// App
	use App\Models\App\Base\Page;
	use App\Models\App\Base\Fragment;



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//    CLASS DECLARATION
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


class PageControllerTest extends TestCase {

	use RefreshDatabase;



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	MODEL LIST
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	public function test_get_public_list() {

		$this->seed();

		// act
		$data = $this->getData('/api/page');

		// assert: correct data
		$this->assertIsArray($data);
		$this->assertEquals('page',$data[0]['type']);
	}



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	MODEL GET
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	public function test_get_public() {

		// arrange
		$page = Page::factory()->public()->create();

		// act
		$data = $this->getData('/api/page/'.$page->slug);

		// check response is page model
		$this->assertEquals('page',$data['type']);
	}


	public function test_get_public_not_found() {

		$this->getError('/api/page/3ec9fc3b-a102-40b6-bd61-743f8bd2403b');
	}



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	MODEL PREVIEW
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	public function test_get_preview() {

		$user = $this->loginAsEditor();

		// arrange
		$page = Page::factory()->create(['public' => false,'published_start' => '2099-01-01 00:00:00']);
		Fragment::factory()->create(['public' => true, 'parent_id' => $page->id,'parent_type' => Page::class]);
		Fragment::factory()->create(['public' => false, 'parent_id' => $page->id,'parent_type' => Page::class]);

		// act
		$data = $this->getData('/api/page/'.$page->slug, [], [
			'X-Preview' => $user->id,
		]);

		// assert: response is page with both fragments
		$this->assertEquals('page',$data['type']);
		$this->assertEquals($page->id,$data['id']);
		$this->assertCount(2,$data['fragments']);
	}


	public function test_user_not_allowed_to_get_preview() {

		$user = $this->loginAsUser();

		// arrange
		$page = Page::factory()->create([ 'public' => false, ]);

		// act
		$response = $this->get('/api/page/'.$page->slug, [
			'X-Preview' => $user->id,
		]);

		// assert
		$response->assertJson(['status'=>'error']);
	}



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	META TAGS
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	public function test_meta_tags_in_html() {

		// arrange
		$page = Page::factory()->public()->create();

		// act
		$response = $this->get($page->slug);

		// assert: correct meta tags
		$response->assertSee('<meta name="description" content="'.$page['meta_description'],false);
		$response->assertSee('<meta property="og:description" content="'.$page['social_description'],false);
	}



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


} // end class

