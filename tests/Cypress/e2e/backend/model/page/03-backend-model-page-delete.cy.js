/// <reference types="cypress" />
/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	TESTS
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


describe('Delete Page model in backend', () => {



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	DELETE PAGE
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	it('delete from list', () => {

		// arrange: go to list page
		cy.backendLogin();
		cy.visit('/backend/page');
		cy.wait(2000);

		// arrange: find cypress test page
		var pageName;
		var page = cy.get('.data-list-item[data-draggable] a').filter(':contains("Cypress Test-Page")').first();
		page.should(target => pageName = target.text().trim());

		// click delete button
		page.parent().parent().find('.data-list-btn.delete').click();
		cy.wait(2000); // wait for async components

		// popup contains current name
		var popup = cy.get('.popup.modal');
		popup = popup.find('.modal-copy').should(target => {
			expect(target).to.contain(pageName);
		});

		// confirm delete
		cy.get('.popup.modal').find('.btn-confirm').click();

		// assert page missing in list
		cy.wait(2000); // wait for list to update
		cy.get('.data-list-item[data-draggable] a').then(e => cy.get(e).filter(':contains("'+pageName+' - edited")').should('not.exist'));
	});



/*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


})
