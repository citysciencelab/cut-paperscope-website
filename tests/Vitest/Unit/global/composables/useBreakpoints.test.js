/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	INCLUDES
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	// vue
	import { setActivePinia, createPinia } from 'pinia'
	setActivePinia(createPinia())

	// app
	import { useGlobalStore } from '@global/stores/GlobalStore';

	// test composable
	import { useBreakpoints } from '@global/composables/useBreakpoints'



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	MOCKS
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	// css vars
	document.body.innerHTML = `<style>
		body { --mobile: 540px; --tabletPortrait: 780px; --tablet: 1050px; }
	</style>`;



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	CSS BREAKPOINTS
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	test('calculates breakpoints correctly', async () => {

		// act
		const {mobileBreakpoint, tabletBreakpoint, tabletPortraitBreakpoint} = useBreakpoints();

		// assert
		expect(mobileBreakpoint).toBe(540);
		expect(tabletPortraitBreakpoint).toBe(780);
		expect(tabletBreakpoint).toBe(1050);
	});



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	MOBILE
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	test('isMobile is true on mobile viewport', async () => {

		// arrange store
		const store = useGlobalStore();
		store.setViewport(480, 9999);

		// act
		const { isMobile, isTabletPortrait, isTablet, isDesktop } = useBreakpoints();

		// assert
		expect(isMobile.value).toBe(true);
		expect(isTabletPortrait.value).toBe(false);
		expect(isTablet.value).toBe(false);
		expect(isDesktop.value).toBe(false);
	});


	test('isMobile is true on mobile landscape viewport', async () => {

		// arrange store
		const store = useGlobalStore();
		store.setViewport(800, 420);

		// act
		const { isMobile, isTabletPortrait, isTablet, isDesktop } = useBreakpoints();

		// assert
		expect(isMobile.value).toBe(true);
		expect(isTabletPortrait.value).toBe(false);
		expect(isTablet.value).toBe(false);
		expect(isDesktop.value).toBe(false);
	});



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	TABLET
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	test('isTabletPortrait is true on tablet portrait viewport', async () => {

		// arrange store
		const store = useGlobalStore();
		store.setViewport(600, 9999);

		// act
		const { isMobile, isTabletPortrait, isTablet, isDesktop } = useBreakpoints();

		// assert
		expect(isMobile.value).toBe(false);
		expect(isTabletPortrait.value).toBe(true);
		expect(isTablet.value).toBe(false);
		expect(isDesktop.value).toBe(false);
	});


	test('isTablet is true on tablet viewport', async () => {

		// arrange store
		const store = useGlobalStore();
		store.setViewport(900, 9999);

		// act
		const { isMobile, isTabletPortrait, isTablet, isDesktop } = useBreakpoints();

		// assert
		expect(isMobile.value).toBe(false);
		expect(isTabletPortrait.value).toBe(false);
		expect(isTablet.value).toBe(true);
		expect(isDesktop.value).toBe(false);
	});


/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	DESKTOP
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	test('isDesktop is true on desktop viewport', async () => {

		// arrange store
		const store = useGlobalStore();
		store.setViewport(1100, 9999);

		// act
		const { isMobile, isTabletPortrait, isTablet, isDesktop } = useBreakpoints();

		// assert
		expect(isMobile.value).toBe(false);
		expect(isTabletPortrait.value).toBe(false);
		expect(isTablet.value).toBe(false);
		expect(isDesktop.value).toBe(true);
	});


/*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


