/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	INCLUDES
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	// test composable
	import { useLazyload } from '@global/composables/useLazyload'



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	PROPS
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	test('timeouted call with updateLazyload', () => {

		// arrange: lazyload
		window.lazyload = {
			update() {},
		};

		// arrange: mocking
		vi.useFakeTimers();
		const spyUpdate = vi.spyOn(window.lazyload, 'update');

		// act
		const { updateLazyload } = useLazyload();
		updateLazyload();
		vi.runAllTimers();

		// assert
		expect(spyUpdate).toHaveBeenCalled();

		// revert
		vi.useRealTimers();
		window.lazyload = null;
	});


	test('remove attributes with resetLazyload', () => {

		// arrange: spy on setTimeout
		const umbrella = vi.spyOn(window, 'u');
		umbrella.mockReturnValue({
			removeClass: vi.fn(),
			attr: vi.fn(),
		});

		// act
		const { resetLazyload } = useLazyload();
		resetLazyload();

		// assert: update lazyload
		expect(window.lazyloadTimer).not.toBeNull();
	});


