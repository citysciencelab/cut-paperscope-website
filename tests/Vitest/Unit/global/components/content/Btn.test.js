/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	INCLUDES
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	// vue
	import { mount } from '@vue/test-utils';

	// test component
	import Btn from '@global/components/content/Btn.vue';



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	INTERNAL LINK
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	test('renders internal link', async () => {

		// act
		const wrapper = mount(Btn, {
			props: {
				to: 'index',
				label: 'button label'
			}
		});

		// assert
		expect(wrapper.html()).toContain('button label');
		expect(wrapper.get('[data-stub="router-link"]').attributes('href')).toBe('index');
	});


	test('renders internal link with path', async () => {

		// act
		const wrapper = mount(Btn, {
			props: {
				path: 'meta/imprint',
				label: 'button label'
			},
		});

		// assert
		expect(wrapper.html()).toContain('button label');
		expect(wrapper.get('[data-stub="router-link"]').attributes('href')).toBe('meta/imprint');
	});



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	EXTERNAL LINK
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	test('renders external link', async () => {

		// act
		const wrapper = mount(Btn, {
			props: {
				href: 'https://www.hello-nasty.com',
				label: 'button label'
			}
		});

		// assert
		expect(wrapper.html()).toContain('button label');
		wrapper.get('a');
		expect(wrapper.get('a').attributes('href')).toBe('https://www.hello-nasty.com');
	});



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	BUTTON
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	test('renders button', async () => {

		// act
		const wrapper = mount(Btn, {
			props: {
				label: 'button label'
			}
		});

		// assert
		expect(wrapper.html()).toContain('button label');
		wrapper.get('button');
	});


	test('toggle button', async () => {

		// act
		const wrapper = mount(Btn, {
			shallow: true,
			props: {
				label: 'button label',
				toggle: true
			}
		});

		// assert
		expect(wrapper.html()).toContain('button label');
		wrapper.get('button');

		// toggle
		await wrapper.get('button').trigger('click');
		expect(wrapper.emitted('click')).toBeTruthy();

		// assert
		expect(wrapper.get('button').classes()).contain('active');
	});



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	BLOCKING BUTTON
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	test('renders blocking button', async () => {

		// act
		const wrapper = mount(Btn, {
			props: {
				label: 'button label',
				blocking: true
			}
		});

		// assert non blocking class
		expect(wrapper.get('button').classes()).not.toContain('blocking');

		// assert blocking class
		await wrapper.get('button').trigger('click');
		expect(wrapper.get('button').classes()).toContain('blocking');
		expect(wrapper.html()).toContain('data-inline="app/loading-api"');
	});



/*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


