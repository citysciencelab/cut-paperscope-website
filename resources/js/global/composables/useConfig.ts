/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	INCLUDES
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	// vue



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	COMPOSABLE
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


export const useConfig = () => {

	const conf = (window as any).config;


	/////////////////////////////////
	// URLS / PATHS
	/////////////////////////////////

	const baseUrl: string	= conf.base_url.startsWith('//localhost') ? 'http:'+conf.base_url : conf.base_url;
	const basePath: string	= conf.base_path;


	/////////////////////////////////
	// STORAGE
	/////////////////////////////////

	// valid storage driver from laravel
	type StorageType = "public"|"s3";

	const storageUrlPublic: string	= conf.storage_url_public;
	const storageUrlS3: string		= conf.storage_url_s3;


	/**
	 * Convert a relative path to a full url depending on the storage type
	 */

	function setStorageUrl(storage: StorageType, path: string) : string {

		if(path.charAt(0) == '/') { path = path.substring(1); }

		switch(storage) {
			case 'public':	return !path.startsWith(storageUrlPublic) ? storageUrlPublic+path : path;
			case 's3':		return !path.startsWith(storageUrlS3) ? storageUrlS3+path : path;
			default:		return path;
		}
	}


	/////////////////////////////////
	// MISC
	/////////////////////////////////

	// context of current page: app (App.js) or backend (Backend.js)
	type WebContext = 'app'|'backend';

	const isLocal: boolean = /localhost|192\.168/.test(conf.base_url);
	const webContext: WebContext = conf.webContext;
	const hash: string = conf.hash;


	/////////////////////////////////
	// EXPORT
	/////////////////////////////////

	return {
		baseUrl, basePath,
		storageUrlPublic, storageUrlS3,
		setStorageUrl,
		isLocal,
		hash, webContext
	};



/*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


};
