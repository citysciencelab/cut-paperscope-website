/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	INCLUDES
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	// Vue
	import { h, resolveComponent } from "vue";
	import { createRouter as createVueRouter, createWebHistory } from 'vue-router'
	import { useUser } from '@global/composables/useUser';

	// components
	const PageError = () => import('@global/pages/PageError.vue');



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	MAIN
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	const createRouter = (routes = [], config = {}) => {

		// merge final config
		let mergedConfig = Object.assign({}, globalConfig, config);
		mergedConfig.routes[0].children = globalRoutes.concat(routes)
		mergedConfig.scrollBehavior = scrollBehavior;

		// init vue router
		var router = createVueRouter(mergedConfig);
		router.beforeEach(beforeEach);

		return router;
	}



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	GLOBAL ROUTES
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	const globalRoutes = [

		{ path: '404/:pathMatch?', name: 'error.404', component: PageError },
		{ path: '403', name: 'error.403', component: PageError, props:{code: '403'} },
	];



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	GLOBAL CONFIG
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	const globalConfig = {

		history: createWebHistory(window.config.base_path),

		routes: [

			// localized routes
			{
				path: '/:lang('+window.config.available_locales.join('|')+')?',
				component: { setup() { return () => h(resolveComponent('router-view')); } }, 		// add a parent <router-view> to handle lang prefix
				children: globalRoutes,
			},
			// catch errors
			{
				path: '/:pathMatch(.*)',
				name: 'error',
				alias: '/:lang('+window.config.available_locales.join('|')+')?/404/:pathMatch',
				component: PageError
			}
		],
	};



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	GLOBAL SCROLL
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	const scrollBehavior = (to, from, savedPosition) => {

		// no scroll on language switch only
		if(to.name == from.name && to.params.lang !== from.params.lang) { return; }

		// no scroll on hash update
		if(to.name == from.name && to.hash != from.hash && (to.hash!='' || from.hash!='') ) { return; }

		// save for delayed scroll after transition animation
		window.savedPosition = savedPosition ?? null;
	};



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	GLOBAL GUARDS
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	const beforeEach = (to, from) => {

		if(to.meta?.auth || to.meta?.member) {

			const loginRoute = { name: "login", query: { redirect: to.fullPath } };
			const { user, userIsMember } = useUser();

			// not logged in
			if(!user.value) { return loginRoute; }

			// not verified
			if(!user.value?.isVerified && to.name != 'verify') { return {name:'verify'}; }

			// not member
			if(to.meta?.member && !userIsMember.value) { return {name:'error'}; }
		}

		// auth: force logout
		if(to.path == '/logout') {

			return {name:window.config.webContext == 'app' ? 'index' : 'login'};
		}

		// reset focus
		setTimeout(() => {
			if(to.name=='login') {
				document.getElementById('input-email')?.focus();
			}
			else if(to.path != from.path) {
				document.body.setAttribute("tabindex", "-1");
				document.body.focus();
				document.body.removeAttribute("tabindex");
			}
		},750);
	};



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	export { createRouter };


