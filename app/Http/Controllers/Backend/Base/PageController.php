<?php
/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	INCLUDES
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	namespace App\Http\Controllers\Backend\Base;

	// Laravel
	use App\Http\Controllers\Backend\BackendController;
	use Illuminate\Http\JsonResponse;

	// App
	use App\Models\App\Base\Page;
	use App\Http\Resources\Base\PageResource;
	use App\Http\Resources\Base\PageListResource;
	use App\Http\Requests\Backend\Base\PageSaveRequest;
	use App\Jobs\Base\ProcessSharingUpload;
	use App\Jobs\Base\ProcessPageUpload;



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	CLASS CONSTRUCT
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


class PageController extends BackendController {

	// model classes
	protected $modelClass = Page::class;
	protected $modelResourceClass = PageResource::class;
	protected $modelListResourceClass = PageListResource::class;

	// model relations
	protected $modelRelations = ['items','fragments'];
	protected $modelListRelations = [];

	// return model list with pagination
	protected $paginator = false;



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	SAVE
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	public function save(PageSaveRequest $request): JsonResponse {

		$validated = $request->validated();

		$page = $this->saveBaseModel($request, ['page']);

		// save page properties
		foreach($this->langKeys as $lang) {
			$page['title'.$lang] = $validated->{'title'.$lang};
		}

		// save relations
		$this->saveManyRelation('items',$validated,$page);

		$page->save();

		// add jobs to queue
		if(!$request->preview) {
			ProcessSharingUpload::dispatch($page);
			ProcessPageUpload::dispatch($page);
		}

		return $this->getBackend($page->id);
	}



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


} // end class
