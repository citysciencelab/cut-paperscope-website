<?php
/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	INCLUDES
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	namespace App\Http\Controllers\Backend\Base;

	// Laravel
	use App\Http\Controllers\Backend\BackendController;
	use Illuminate\Http\JsonResponse;

	// App
	use App\Models\App\Base\Fragment;
	use App\Http\Resources\Base\FragmentResource;
	use App\Http\Resources\Base\FragmentListResource;
	use App\Http\Requests\Backend\Base\FragmentSaveRequest;
	use App\Jobs\Base\ProcessFragmentUpload;



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	CLASS CONSTRUCT
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


class FragmentController extends BackendController {

	// model classes
	protected $modelClass = Fragment::class;
	protected $modelResourceClass = FragmentResource::class;
	protected $modelListResourceClass = FragmentListResource::class;

	// model relations
	protected $modelRelations = ['parent'];
	protected $modelListRelations = [];

	// return model list with pagination
	protected $paginator = false;



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	SAVE
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	public function save(FragmentSaveRequest $request): JsonResponse {

		$validated = $request->validated();

		$fragment  = $this->saveBaseModel($request);

		// save fragment properties
		$fragment->template 		= $validated->template;
		$fragment->order 			= $validated->order ?? 0;

		// save fragment content
		foreach($this->langKeys as $lang) {
			$fragment['content'.$lang] = $this->getInputJson($validated->{'content'.$lang});
		}

		// save relations
		$this->saveParentRelation($validated, $fragment);

		$fragment->save();

		if(!$validated->preview) {
			ProcessFragmentUpload::dispatch($fragment);
		}

		return $this->getBackend($fragment->id);
	}



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


} // end class
