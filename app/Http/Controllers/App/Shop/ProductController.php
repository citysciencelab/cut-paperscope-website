<?php
/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	INCLUDES
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	namespace App\Http\Controllers\App\Shop;

	// Laravel
	use App\Http\Controllers\App\AppController;
	use Illuminate\Support\Facades\Auth;
	use Illuminate\Http\JsonResponse;

	// App
	use App\Models\Shop\Product;
	use App\Http\Resources\Shop\ProductResource;
	use App\Http\Resources\Shop\ProductListResource;
	use App\Http\Resources\Shop\ProductPaidResource;
	use App\Http\Requests\App\Base\ListWithFilterRequest;



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	CLASS CONSTRUCT
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


class ProductController extends AppController {

	// model classes
	protected $modelClass = Product::class;
	protected $modelResourceClass = ProductResource::class;
	protected $modelListResourceClass = ProductListResource::class;

	// model relations
	protected $modelRelations = [];
	protected $modelListRelations = [];

	// return model list with pagination
	protected $paginator = false;



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	LIST FILTER
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	protected function applyFilterWhere(&$stmt, ListWithFilterRequest &$request, bool $usePublished) {

		parent::applyFilterWhere($stmt,$request,$usePublished);

		$stmt->where('stripe_synced',1);
	}



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	GET
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	public function getPublicBySlug(string $slug=null): JsonResponse {

		$item = $this->modelClass::with($this->modelRelations)->whereSlug($slug)->public()->published()->where('stripe_synced',1)->first();
		return $this->responseGet($item);
	}



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	PAID PRODUCT
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	public function getPaidBySlug(string $slug=null): JsonResponse {

		if($this->isPreviewRequest()) {
			$product = $this->loadPublicBySlug($slug);
			$product->pivot = new \stdClass;
			$product->pivot->receipt = 'preview';
			$product->pivot->status = 'succeeded';
			return $this->responseData(new ProductPaidResource($product));
		}

		$product = Auth::user()->products()->where('slug',$slug)->first();

		// skip if product unavailable
		if(!$product || !$product->pivot) { return $this->responseError(); }

		// if payment already succeeded
		if($product->pivot->status == 'succeeded') {
			return $this->responseData(new ProductPaidResource($product));
		}

		// pending payment
		return response()->json(['status' => 'success'], 202);
	}



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


} // end class
