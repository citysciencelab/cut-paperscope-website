<?php
/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	INCLUDES
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	namespace App\Http\Controllers\Auth;

	// Laravel
	use Illuminate\Support\Facades\Auth;
	use Illuminate\Support\Facades\Storage;
	use Illuminate\Http\JsonResponse;
	use Illuminate\Support\Str;

	// App
	use App\Traits\UploadValidationTrait;
	use App\Http\Requests\Auth\UserUploadRequest;
	use App\Http\Controllers\Backend\BackendController;



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	CLASS CONSTRUCT
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


class UploadController extends BackendController {

	use UploadValidationTrait;



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	USER UPLOAD
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	public function userUpload(UserUploadRequest $request): JsonResponse {

		$me = Auth::user();
		$id = $request->validated('id');
		$folder = $request->validated('folder');

		// addional request validation
		if($id != $me->id) { return $this->responseError(403, 'api.user_not_allowed'); }
		if(!$this->validateFolder($folder)) { return $this->responseError(422); }

		// file
		$path = 'userupload/'.$me->id.'/';
		if($folder) { $path .= Str::lower(rtrim($folder,'/')).'/'; }
		$file = $request->file('file');
		//$filename = Str::lower('upload.'.$file->getClientOriginalExtension());
		$filename = Str::lower($file->getClientOriginalName());

		// additional security check
		if(!$this->validateUpload($filename,$file)) { return $this->responseError(422); }

		// save file to temp storage
		Storage::disk('temp')->putFileAs($path, $file, $filename);

		return $this->responseData($path.$filename, 'file');
	}



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */

} // end class
