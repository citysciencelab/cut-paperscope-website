<?php
/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	INCLUDES
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	namespace App\Jobs\Newsletter;

	use Illuminate\Bus\Queueable;
	use Illuminate\Contracts\Queue\ShouldQueue;
	use Illuminate\Foundation\Bus\Dispatchable;
	use Illuminate\Queue\InteractsWithQueue;
	use Illuminate\Queue\SerializesModels;
	use Illuminate\Support\Facades\Log;
	use GuzzleHttp\Client as GuzzleClient;
	use Throwable;



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	CLASS DECLARATION
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


class RemoveUserFromNewsletter implements ShouldQueue
{
	// Traits
	use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

	protected $email;


	public function __construct($email) {

		$this->email = $email;
	}


	public function failed(Throwable $exception): void {

		Log::critical("Job failed: Unable to remove Brevo contact. Email: " . ($this->email ?? 'Undefined') );
	}



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	HANDLE
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	public function handle(): void  {

		// init Brevo API
		$config = \Brevo\Client\Configuration::getDefaultConfiguration()->setApiKey('api-key', config('mail.brevo.key'));
		$config = \Brevo\Client\Configuration::getDefaultConfiguration()->setApiKey('partner-key', config('mail.brevo.key'));
		$apiInstance = new \Brevo\Client\Api\ContactsApi( new GuzzleClient(), $config);

		// delete contact
		try {
   			$apiInstance->deleteContact($this->email);
		}
		catch (\Exception $e) {
			Log::critical('Exception when calling ContactsApi->deleteContact: ' . $e->getMessage() );
		}
	}



/*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */



}
