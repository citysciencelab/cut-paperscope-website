/// <reference types="cypress" />
/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	TESTS
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


describe('Delete {{ModelClass}} model in backend', () => {



/*///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//	DELETE {{uppercase}}
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


	it('delete from list', () => {

		// arrange: go to list page
		cy.backendLogin();
		cy.visit('/backend/{{slug}}');
		cy.wait(2000);

		// arrange: find cypress test {{slug}}
		var {{slug}}Name;
		var {{slug}} = cy.get('.data-list-item[data-draggable] a').filter(':contains("Cypress Test-{{ModelClass}}")').first();
		{{slug}}.should(target => {{slug}}Name = target.text().trim());

		// click delete button
		{{slug}}.parent().parent().find('.data-list-btn.delete').click();
		cy.wait(2000); // wait for async components

		// popup contains current name
		var popup = cy.get('.popup.modal');
		popup = popup.find('.modal-copy').should(target => {
			expect(target).to.contain({{slug}}Name);
		});

		// confirm delete
		cy.get('.popup.modal').find('.btn-confirm').click();

		// assert {{slug}} missing in list
		cy.wait(2000); // wait for list to update
		cy.get('.data-list-item[data-draggable] a').then(e => cy.get(e).filter(':contains("'+{{slug}}Name+' - edited")').should('not.exist'));
	});



/*/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */


})
